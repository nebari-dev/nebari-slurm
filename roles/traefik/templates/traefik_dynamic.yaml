{% if traefik_tls_type == "certificate" %}
tls:
  certificates:
    - certFile: "{{ _traefik_tls_certificate.dest }}"
      keyFile: "{{ _traefik_tls_key.dest }}"
      stores:
        - default
  stores:
    default:
      defaultCertificate:
        certFile: "{{ _traefik_tls_certificate.dest }}"
        keyFile: "{{ _traefik_tls_key.dest }}"
{% endif %}

# ============ TCP Route Configuration ===========
tcp:
  services:
    jupyterhub-ssh:
      loadBalancer:
        servers:
          - address: "localhost:{{ jupyterhub_ssh_internal_port }}"
    dask-gateway-scheduler:
      loadBalancer:
        servers:
          - address: "localhost:{{ dask_gateway_scheduler_internal_port }}"
  routers:
    jupyterhub-ssh:
      entryPoints:
        - "jupyterhub-ssh"
      rule: "HostSNI(`*`)"
      service: "jupyterhub-ssh"
    dask-gateway-scheduler:
      entryPoints:
        - "dask-gateway-scheduler"
      rule: "HostSNI(`*`)"
      service: "dask-gateway-scheduler"
      tls:
        passthrough: true

# ========== HTTP/HTTPS Route Configuration ===========
http:
  middlewares:
    https-redirect:
      redirectscheme:
        scheme: "https"
    dask-gateway-strip:
      stripPrefix:
        prefixes:
          - "/gateway"

  services:
    dummy: # never reacher due to middleware http -> https redirect
      loadBalancer:
        servers:
          - url: "localhost"

    minio:
      loadBalancer:
        servers:
          - url: "http://localhost:{{ minio_internal_port }}/"
    keycloak:
      loadBalancer:
        servers:
          - url: "http://localhost:{{ keycloak_port }}/"
    jupyterhub:
      loadBalancer:
        servers:
          - url: "http://localhost:{{ jupyterhub_proxy_port }}/"
    grafana:
      loadBalancer:
        servers:
          - url: "http://localhost:{{ grafana_port }}/"
    dask-gateway:
      loadBalancer:
        servers:
          - url: "http://localhost:{{ dask_gateway_api_port }}/"
    conda-store:
      loadBalancer:
        servers:
          - url: "http://localhost:{{ conda_store_port }}/"

  routers:
    https-redirect:
      rule: "HostRegexp(`{any:.*}`)"
      middlewares: ["https-redirect"]
      entryPoints:
        - "web"
      service: "dummy"

    minio:
      rule: "Host(`{{ traefik_domain | default(hostvars[groups['hpc-master'][0]].ansible_host) }}`)"
      entryPoints:
        - "minio"
      service: "minio"
    keycloak:
      rule: "Host(`{{ traefik_domain | default(hostvars[groups['hpc-master'][0]].ansible_host) }}`) && PathPrefix(`/auth`)"
      entryPoints:
        - "websecure"
      service: "keycloak"
    jupyterhub:
      rule: "Host(`{{ traefik_domain | default(hostvars[groups['hpc-master'][0]].ansible_host) }}`) && PathPrefix(`{{ jupyterhub_base_url }}`)"
      entryPoints:
        - "websecure"
      service: "jupyterhub"
    grafana:
      rule: "Host(`{{ traefik_domain | default(hostvars[groups['hpc-master'][0]].ansible_host) }}`) && PathPrefix(`{{ grafana_base_url }}`)"
      entryPoints:
        - "websecure"
      service: "grafana"
    dask-gateway:
      rule: "Host(`{{ traefik_domain | default(hostvars[groups['hpc-master'][0]].ansible_host) }}`) && (PathPrefix(`/clusters`) || PathPrefix(`/gateway`))"
      middlewares: ["dask-gateway-strip"]
      entryPoints:
        - "websecure"
      service: "dask-gateway"
    conda-store:
      rule: "Host(`{{ traefik_domain | default(hostvars[groups['hpc-master'][0]].ansible_host) }}`) && PathPrefix(`{{ conda_store_prefix }}`)"
      entryPoints:
        - "websecure"
      service: "conda-store"
