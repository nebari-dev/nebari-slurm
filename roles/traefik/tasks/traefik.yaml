---
- name: Check that the traefik binary exists
  ansible.builtin.stat:
    path: /usr/local/bin/traefik
  register: _traefik_stat

- name: Download traefik binary
  become: true
  ansible.builtin.get_url:
    url: https://github.com/traefik/traefik/releases/download/v{{ traefik_version }}/traefik_v{{ traefik_version }}_linux_amd64.tar.gz
    checksum: sha256:{{ traefik_sha256 }}
    dest: /tmp/traefik_v{{ traefik_version }}_linux_amd64.tar.gz
    force: false
    mode: "0755"
  when: not _traefik_stat.stat.exists

- name: Unpack traefik binary
  ansible.builtin.unarchive:
    src: /tmp/traefik_v{{ traefik_version }}_linux_amd64.tar.gz
    remote_src: true
    dest: /tmp
    creates: /tmp/traefik
  when: not _traefik_stat.stat.exists

- name: Install traefik binary
  become: true
  ansible.builtin.copy:
    src: /tmp/traefik
    dest: /usr/local/bin/traefik
    remote_src: true
    mode: "0755"
    owner: root
    group: root
  when: not _traefik_stat.stat.exists

- name: Create traefik group
  become: true
  ansible.builtin.group:
    name: traefik
    state: present
    system: true

- name: Create the traefik user
  become: true
  ansible.builtin.user:
    name: traefik
    groups: traefik
    append: true
    shell: /usr/sbin/nologin
    system: true
    create_home: false
    home: /

- name: Ensure that traefik configuration directory exists
  become: true
  ansible.builtin.file:
    path: /etc/traefik
    state: directory
    mode: "0700"
    owner: traefik
    group: traefik

- name: Ensure that traefik acme configuration directory exists
  become: true
  ansible.builtin.file:
    path: /etc/traefik/acme
    state: directory
    mode: "0700"
    owner: traefik
    group: traefik

- name: Ensure that traefik certs configuration directory exists
  become: true
  ansible.builtin.file:
    path: /etc/traefik/certs
    state: directory
    mode: "0700"
    owner: traefik
    group: traefik
  when: traefik_tls_certificate is defined

- name: Copy TLS certificate if provided
  become: true
  ansible.builtin.copy:
    src: "{{ traefik_tls_certificate }}"
    dest: /etc/traefik/certs/{{ traefik_tls_certificate | basename }}
    remote_src: "{{ traefik_tls_certificate_remote_src | default(false) }}"
    mode: "444"
    owner: traefik
    group: traefik
  when: traefik_tls_certificate is defined
  notify: Restart services traefik
  register: _traefik_tls_certificate

- name: Copy TLS key if provided
  become: true
  ansible.builtin.copy:
    src: "{{ traefik_tls_key }}"
    dest: /etc/traefik/certs/{{ traefik_tls_key | basename }}
    remote_src: "{{ traefik_tls_key_remote_src | default(false) }}"
    mode: "0400"
    owner: traefik
    group: traefik
  when: traefik_tls_key is defined
  notify: Restart services traefik
  register: _traefik_tls_key

- name: Copy traefik configuration
  become: true
  ansible.builtin.template:
    src: templates/traefik.yaml
    dest: /etc/traefik/traefik.yaml
    mode: "0600"
    owner: traefik
    group: traefik
  notify: Restart services traefik

- name: Copy traefik dynamic configuration
  become: true
  ansible.builtin.template:
    src: templates/traefik_dynamic.yaml
    dest: /etc/traefik/traefik_dynamic.yaml
    mode: "0600"
    owner: traefik
    group: traefik
  notify: Restart services traefik

- name: Copy the traefik systemd service file
  become: true
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=traefik proxy
      After=network-online.target
      Wants=network-online.target systemd-networkd-wait-online.service

      [Service]
      Restart=always
      User=traefik
      Group=traefik
      ExecStart=/usr/local/bin/traefik --configfile=/etc/traefik/traefik.yaml
      LimitNOFILE=1048576
      PrivateTmp=true
      PrivateDevices=false
      ProtectHome=true
      ProtectSystem=full
      ReadWriteDirectories=/etc/traefik/acme
      CapabilityBoundingSet=CAP_NET_BIND_SERVICE
      AmbientCapabilities=CAP_NET_BIND_SERVICE
      NoNewPrivileges=true

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/traefik.service
    owner: root
    group: root
    mode: "0644"
  notify: Restart services traefik

- name: Ensure Traefik is enabled on boot
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    name: traefik
    enabled: true
    state: started

- name: Allow traefik http through firewall
  become: true
  community.general.ufw:
    rule: allow
    port: "80"
    proto: tcp
  when: firewall_enabled

- name: Allow traefik https through firewall
  become: true
  community.general.ufw:
    rule: allow
    port: "443"
    proto: tcp
  when: firewall_enabled

- name: Allow jupyterhub-ssh through firewall
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ jupyterhub_ssh_external_port }}"
    proto: tcp
  when: firewall_enabled

- name: Allow dask-gateway-scheduler through firewall
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ dask_gateway_scheduler_external_port }}"
    proto: tcp
  when: firewall_enabled

- name: Allow minio through firewall
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ minio_external_port }}"
    proto: tcp
  when: firewall_enabled
