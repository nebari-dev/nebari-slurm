---
- name: Check if MySQL is already installed.
  ansible.builtin.stat:
    path: "{{ mysql_config_file }}"
  register: mysql_installed

- name: Update apt cache if MySQL is not yet installed.
  ansible.builtin.apt:
    update_cache: yes
  changed_when: False
  when: not mysql_installed.stat.exists

- name: Ensure MySQL Python libraries are installed.
  become: true
  timeout: 300
  ansible.builtin.apt:
    name: "{{ mysql_python_package }}"
    state: present

- name: Ensure MySQL packages are installed.
  become: true
  timeout: 300
  ansible.builtin.apt:
    name: "{{ mysql_packages }}"
    state: present
  register: mysql_install_packages

- name: Check if MySQL packages were installed.
  ansible.builtin.set_fact:
    mysql_install_packages: "{{ mysql_install_packages is defined and mysql_install_packages.changed }}"

- name: Ensure mysql settings in file
  become: true
  community.general.ini_file:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    section: mysqld
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    mode: "0655"
    backup: true
  with_dict: "{{ mysql_config }}"
  notify: Restart services mysql

- name: Ensure MySQL is running and enabled
  become: true
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true
  register: mysql_service

- name: Check if the debian.cnf file exists
  ansible.builtin.stat:
    path: /etc/mysql/debian.cnf
  register: debian_cnf_file

- name: Grab the debian.cnf content
  become: true
  ansible.builtin.slurp:
    src: /etc/mysql/debian.cnf
  register: debian_cnf_content
  when: debian_cnf_file.stat.exists

- name: Set facts from debian.cnf content
  set_fact:
    debian_sys_maint_user: "debian-sys-maint"
    debian_sys_maint_password: "{{ (debian_cnf_content['content'] | b64decode).split('\n') | select('match', '^password = ') | first | split('=') | last | trim }}"
  when: debian_cnf_file.stat.exists

- name: Create mysql databases using debian-sys-maint credentials
  community.mysql.mysql_db:
    login_user: "{{ debian_sys_maint_user | default(omit) }}"
    login_password: "{{ debian_sys_maint_password | default(omit) }}"
    name: "{{ item }}"
    state: present
  with_items: "{{ mysql_databases }}"
  when: debian_cnf_file.stat.exists

- name: Create mysql databases as root (if debian.cnf does not exist)
  community.mysql.mysql_db:
    name: "{{ item }}"
    state: present
  with_items: "{{ mysql_databases }}"
  when: not debian_cnf_file.stat.exists

- name: Create mysql users using debian-sys-maint credentials
  community.mysql.mysql_user:
    login_user: "{{ debian_sys_maint_user | default(omit) }}"
    login_password: "{{ debian_sys_maint_password | default(omit) }}"
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    priv: "{{ item.privileges }}"
    state: present
  with_items: "{{ mysql_users }}"
  no_log: true # Avoid logging user creds
  when: debian_cnf_file.stat.exists

- name: Create mysql users as root (if debian.cnf does not exist)
  community.mysql.mysql_user:
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    priv: "{{ item.privileges }}"
    state: present
  with_items: "{{ mysql_users }}"
  no_log: true # Avoid logging user creds
  when: not debian_cnf_file.stat.exists
